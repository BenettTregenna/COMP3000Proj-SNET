<!DOCTYPE html>

<html>

<!-- include handlebars -->
<script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>

<head>
    <%- include('../partials/head'); %>
    <%- include('../partials/ModalCss'); %>
    <!--<link rel="stylesheet" href="/next.css">
    <script type="text/javascript" src="next.js"></script>-->
</head>

<!-- Top container -->
<%- include('../partials/header'); %>



<body class="w3-light-grey" onload="populateVisStartup()">
<!-- !PAGE CONTENT! -->
<div class="w3-main" style="margin-left:320px;margin-top:70px;">

    <div class="w3-row">
    <!-- Left Column -->
        <div class="w3-col m7">
          <!-- Profile -->
          <div class="w3-card w3-round w3-white">
            <div class="w3-container">
             <h3 class="w3-center">Network Configurator</h3>
             <hr>
             <div class="w3-container w3-center">
                 <p id="saveStatus"></p>
                 <h5 id="mainFileNameDisplay"></h5>
             </div>
            </div>
          </div>
          <br>

          <!-- network visualiser -->
          <div class="w3-card w3-round">
              <div class="w3-container w3-center">
                  <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
                  <style type="text/css">
                      #mynetwork {
                        height: 600px;
                      }
                  </style>
                  <div id="mynetwork"></div>
              </div>
          </div>
          <br>

          <!-- Net creation status -->
          <div class="w3-card w3-round w3-white w3-hide-small">
            <div class="w3-container">
              <h5>Network Creation Status</h5>
              <p id="messageOutput"></p>
              <br>
            </div>
          </div>
          <br>

        <!-- End Left Column -->
        </div>

        <!-- Right Column -->
        <div class="w3-col m5">
            <!-- Save load box -->
          <div class="w3-row-padding">
            <div class="w3-col m12">
              <div class="w3-card w3-round w3-white">
                <div class="w3-container w3-padding">
                  <h6 class="w3-opacity">Save/ load a Configuration</h6>
                  <p id="tbxCurrentFileName" class="w3-border w3-padding"></p>
                  <p id="saveStatusReadout"></p>
                  <button onclick="saveNetworkToDB(document.getElementById('mainFileNameDisplay').innerText, 'Existing')" type="button" class="w3-button w3-theme"><i class="fas fa-save"></i>  Save</button>
                  <button onclick="document.getElementById('modSaveNewNetwork').style.display='block'" type="button" class="w3-button w3-theme"><i class="fas fa-file-export"></i>  Save As</button>
<!--                    // save as Modal -->
                  <%- include('../partials/SaveModalPopup'); %>
                  <button onclick="document.getElementById('modLoadNetwork').style.display='block'; fillFileNameSelect()" type="button" class="w3-button w3-theme"><i class="fas fa-upload"></i>  Load</button>
<!--                     // load modal -->
                  <%- include('../partials/LoadModal'); %>


                </div>
              </div>
            </div>
          </div>
            <!-- Host box -->
          <div class="w3-container w3-card w3-white w3-round w3-margin w3-left-align"><br>
              <i class="fas fa-desktop "></i>
              <button onclick="showHideElement('addHost')" class="w3-button w3-block w3-left-align">Add New Host</button>
              <div id="addHost" class="w3-container w3-hide w3-light-grey">
                  <h6>
                      <span style="color:black">New Host Configuration</span>
                      <button onclick= addElement('host') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-plus-square"></i>  Create</button>
                  </h6>
                  <p><label>Hostname:</label>
                  <input class="w3-input w3-border" id="tbxHostHostname" type="text"></p>
                  <p> ... other attributes</p>
              </div>
          </div>
            <!-- Switch box -->
          <div class="w3-container w3-card w3-white w3-round w3-margin"><br>
              <button onclick="showHideElement('addSwitch')" class="w3-button w3-block w3-left-align">Add Switch</button>
              <div id="addSwitch" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Switch Configuration</span>
                      <button onclick= addElement('switch') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-plus-square"></i>  Create</button>
                  </h4>
                  <p><label>Hostname:</label>
                  <input class="w3-input w3-border" id="tbxSwitchHostname" type="text"></p>
                  <p> ... other attributes</p>
              </div>
          </div>
            <!-- Router box -->
          <div class="w3-container w3-card w3-white w3-round w3-margin"><br>
              <button onclick="showHideElement('addRouter')" class="w3-button w3-block w3-left-align">Add Router</button>
              <div id="addRouter" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Router Configuration</span>
                      <button onclick= addElement('router') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-plus-square"></i>  Create</button>
                  </h4>
                  <p><label>Hostname:</label>
                  <input class="w3-input w3-border" id="tbxRouterHostname" type="text"></p>
                  <p> ... other attributes</p>
              </div>
          </div>
            <!-- Link box -->
          <div class="w3-container w3-card w3-white w3-round w3-margin"><br>
              <button onclick="showHideElement('addLink')" class="w3-button w3-block w3-left-align">Add Link</button>
              <div id="addLink" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Link Configuration</span>
                      <button onclick= addElement('link') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-plus-square"></i>  Create</button>
                  </h4>
                  <p><label>Source:</label>
                      <select id="selectSource" ></select>
                  <br>
                  <p><label>Destination:</label>
                      <select id="selectDest" ></select></p>
                  <hr style="height:2px;border-width:0;color:gray;background-color:gray">
                  <p><label>Cable Type:</label>
                      <select id="selectCableType" onchange="onCableTypeChanged(this.value,'add')"></select></p>
                  <p style="font-size:11.0pt">Speed: <span id="cableTypeSpeedBanner" style="font-size:11.0pt"></span></p>
                  <p style="font-size:11.0pt">Bandwidth: <span id="cableTypeBandwidthBanner" style="font-size:11.0pt"></span></p>
              </div>
          </div>
            <!-- Edit box -->
          <div class="w3-container w3-card w3-white w3-round w3-margin"><br>
              <p>click an item to edit ...</p>
              <div id="editHost" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Edit Host Configuration</span>
                      <p style="font-size:11.0pt">Host Id: <span id="hostIdBanner" style="font-size:11.0pt"></span></p>
                      <button onclick= delElement('host') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-minus-square"></i>  Delete</button>
                      <button onclick= editElement('host') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-share-square"></i> Save</button>
                  </h4>
                  <p><label>Hostname:</label>
                  <input class="w3-input w3-border" id="tbxEditHostHostname" type="text"></p>
                  <p> ... other attributes</p>
              </div>
              <div id="editSwitch" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Edit Switch Configuration</span>
                      <p style="font-size:11.0pt">Switch Id: <span id="switchIdBanner" style="font-size:11.0pt"></span></p>
                      <button onclick= delElement('switch') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-minus-square"></i>  Delete</button>
                      <button onclick= editElement('switch') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-share-square"></i> Save</button>
                  </h4>
                  <p><label>Hostname:</label>
                  <input class="w3-input w3-border" id="tbxEditSwitchHostname" type="text"></p>
                  <p> ... other attributes</p>
              </div>
              <div id="editRouter" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Edit Router Configuration</span>
                      <p style="font-size:11.0pt">Router Id: <span id="routerIdBanner" style="font-size:11.0pt"></span></p>
                      <button onclick= delElement('router') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-minus-square"></i>  Delete</button>
                      <button onclick= editElement('router') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-share-square"></i> Save</button>
                  </h4>
                  <p><label>Hostname:</label>
                  <input class="w3-input w3-border" id="tbxEditRouterHostname" type="text"></p>
                  <p> ... other attributes</p>
              </div>
              <div id="editLink" class="w3-container w3-hide w3-light-grey">
                  <h4>
                      <span style="color:black">Edit Link Configuration</span>
                      <p style="font-size:11.0pt">Link Id: <span id="linkIdBanner" style="font-size:11.0pt"></span></p>
                      <button onclick= delElement('link') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-minus-square"></i>  Delete</button>
                      <button onclick= editElement('link') type="button" class="w3-button w3-theme-d2 pull-right"><i class="fas fa-share-square"></i> Save</button>
                  </h4>
                  <p><label>Source:</label>
                      <select id="editSource" ></select>
                  <br>
                  <p><label>Destination:</label>
                      <select id="editDest" ></select></p>
                  <hr style="height:2px;border-width:0;color:gray;background-color:gray">
                  <p><label>Cable Type:</label>
                      <select id="editCableType" onchange="onCableTypeChanged(this.value)"></select></p>
                  <p style="font-size:11.0pt">Speed: <span id="editCableTypeSpeedBanner" style="font-size:11.0pt"></span></p>
                  <p style="font-size:11.0pt">Bandwidth: <span id="editCableTypeBandwidthBanner" style="font-size:11.0pt"></span></p>

              </div>
          </div>

        <!-- End Right Column -->
        </div>

      <!-- End Grid -->
      </div>
        <%- include('../partials/footer'); %>
    </div>
</div>

</body>

    <!--<div id="topology-container" style="margin-left:300px;margin-top:43px;"></div>
    <script type="text/javascript" src="data.js"></script>
	<script type="text/javascript" src="/app.js"></script>-->

<script type="text/javascript">

    var visNodes = new vis.DataSet({});
    var visEdges = new vis.DataSet({});

    // create a network
    let visContainer = document.getElementById("mynetwork");
    var visData = {
    nodes: visNodes,
    edges: visEdges,
    };
    let visOptions = {interaction: { hover: true }};
    var visNetwork = new vis.Network(visContainer, visData, visOptions);


    // setup link types
    var linkTypes = [];
    getLinkTypes().then(function(result){
        linkTypes = result;
        let selectLinkCableType = document.getElementById("selectCableType");
        refreshLinkOptsDD(selectLinkCableType, linkTypes);

        let currentType = document.getElementById('selectCableType').value;
        let linkToShow = getLinkObjectByType(currentType);
        document.getElementById('cableTypeSpeedBanner').innerText = linkToShow.speed;
        document.getElementById('cableTypeBandwidthBanner').innerText = linkToShow.bandwidth;
    })

    getFileName().then(function(result){
        setFileNameUI(result)
    })



    // vis networks

    visNetwork.on("click", function(properties) {
        let selection = visNetwork.getSelection();
        if(selection.nodes.length > 0){
            document.getElementById('messageOutput').innerText = 'Editing node: '+ selection.nodes[0];
            loadEditUi(selection.nodes[0]);
        }else if(selection.edges.length > 0){
            document.getElementById('messageOutput').innerText = 'Editing Link: '+ selection.edges[0];
            loadEditUi(selection.edges[0])
        }else{
            document.getElementById('messageOutput').innerText = '';
            document.getElementById('editHost').className = document.getElementById('editHost').className.replace(" w3-show", "");
            document.getElementById('editSwitch').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
            document.getElementById('editRouter').className = document.getElementById('editRouter').className.replace(" w3-show", "");
            document.getElementById('editLink').className = document.getElementById('editLink').className.replace(" w3-show", "");
        }
        console.log(visNodes);
        console.log(visData.nodes);
        console.log(visNetwork.body.nodes);
    });

    async function populateVisStartup(){
        const msgOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        const msg = await fetch('/getNetConf', msgOptions);
        let runningConf = await msg.json();

        let visNodes = new vis.DataSet(runningConf.runningNodes);
        let visEdges = new vis.DataSet(runningConf.runningEdges);
        restartVisNetwork(visNodes,visEdges);
    };

    function restartVisNetwork(visNodes,visEdges){
        visNetwork.setData({nodes: visNodes, edges: visEdges});
        visData.nodes = visNodes;
        visData.edges = visEdges;
        // refresh link dropdowns
        console.log(visNetwork);
        refreshLinkDD();
        visNetwork.redraw();

    }

    //ui

    function setFileNameUI(fileName){
        if (fileName == null){
             document.getElementById('tbxCurrentFileName').innerText = "-- New_Network --"
             document.getElementById('mainFileNameDisplay').innerText = "New Network"
        }else {
            document.getElementById('tbxCurrentFileName').innerText = ("file: "+ fileName)
            document.getElementById('mainFileNameDisplay').innerText = fileName
        }
    }

    function refreshLinkDD(){

        let selectSource = document.getElementById("selectSource");
        let selectDest = document.getElementById("selectDest");

        while(selectDest.options.length > 0){
          selectDest.options.remove(0);
        }
        while(selectSource.options.length > 0){
          selectSource.options.remove(0);
        }

        visData.nodes.forEach(function(node){
          let selectOption = new Option(node.label);
          selectDest.appendChild(selectOption);
        })

        visData.nodes.forEach(function(node){
          let selectOption = new Option(node.label);
          selectSource.appendChild(selectOption);
        })
    }

    function refreshLinkOptsDD(dropdown, linkTypes){
        while(dropdown.options.length > 0){
          dropdown.options.remove(0);
        }

        for (const type of linkTypes) {
            console.log(type);
            let selectOption = new Option(type.cableType);
            dropdown.appendChild(selectOption);
        }
    }

    function showHideElement(id) {
        var x = document.getElementById(id);
        if (x.className.indexOf("w3-show") == -1) {
          collapseUI();
          x.className += " w3-show";
          if(id == 'addLink') {
              refreshLinkDD();
          }
        } else {
          x.className = x.className.replace(" w3-show", "");
        }
    }

    function collapseUI(){
        document.getElementById('addHost').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
        document.getElementById('addSwitch').className = document.getElementById('editRouter').className.replace(" w3-show", "");
        document.getElementById('addRouter').className = document.getElementById('editLink').className.replace(" w3-show", "");
        document.getElementById('addLink').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
        document.getElementById('editHost').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
        document.getElementById('editSwitch').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
        document.getElementById('editRouter').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
        document.getElementById('editLink').className = document.getElementById('editSwitch').className.replace(" w3-show", "");
    }

    async function loadEditUi(itemId){
        collapseUI()
        let stringId = itemId.toString();
        let chosenItem = await getItemDetails(itemId);
        switch(stringId.charAt(0)){
            case '1':
                //setup host div
                document.getElementById('hostIdBanner').innerText = chosenItem.id
                document.getElementById('tbxEditHostHostname').value = chosenItem.hostname;
                document.getElementById('editHost').className += " w3-show";
                break;
            case '2':
                //setup switch div
                document.getElementById('switchIdBanner').innerText = chosenItem.id
                document.getElementById('tbxEditSwitchHostname').value = chosenItem.hostname;
                document.getElementById('editSwitch').className += " w3-show";
                break;
            case '3':
                //setup router div
                document.getElementById('routerIdBanner').innerText = chosenItem.id
                document.getElementById('tbxEditRouterHostname').value = chosenItem.hostname;
                document.getElementById('editRouter').className += " w3-show";
                break;
            case '4':
                //setup link div
                let editSource = document.getElementById("editSource");
                let editDest = document.getElementById("editDest");
                let editLinkCableType = document.getElementById("editCableType");

                while(editDest.options.length > 0){
                  editDest.options.remove(0);
                }
                while(editSource.options.length > 0){
                  editSource.options.remove(0);
                }

                visData.nodes.forEach(function(node){
                  let selectOption = new Option(node.label);
                  editDest.appendChild(selectOption);
                })

                visData.nodes.forEach(function(node){
                  let selectOption = new Option(node.label);
                  editSource.appendChild(selectOption);
                })

                refreshLinkOptsDD(editLinkCableType, linkTypes)

                console.log('chosen item:');
                console.log(chosenItem);

                document.getElementById('linkIdBanner').innerText = chosenItem.id
                document.getElementById('editSource').value = chosenItem.source;
                document.getElementById('editDest').value = chosenItem.destination;
                document.getElementById('editCableType').value = chosenItem.linkType.cableType;
                onCableTypeChanged(chosenItem.linkType.cableType,'');
                document.getElementById('editLink').className += " w3-show";
                break;

        }

    }

    function onCableTypeChanged(typeName, calledFrom){
        let linkType = getLinkObjectByType(typeName)
        if(calledFrom == 'add'){
            document.getElementById('cableTypeSpeedBanner').innerText = linkType.speed
            document.getElementById('cableTypeBandwidthBanner').innerText = linkType.bandwidth
        }else {
            document.getElementById('editCableTypeSpeedBanner').innerText = linkType.speed
            document.getElementById('editCableTypeBandwidthBanner').innerText = linkType.bandwidth
        }

    }

    function getLinkObjectByType(chosenType){
        let foundType;
        linkTypes.forEach(function(type){
            if (chosenType === type.cableType){
                foundType = type
            }
        })
        return foundType
    }

    async function fileUnsavedUI(){
        let currentFileName = await getFileName()
        document.getElementById('tbxCurrentFileName').innerText = 'file:' + currentFileName + '*'
    }

    async function fillFileNameSelect(){
        let fileNameArray = []
        fileNameArray = await getDBInfo();

        let fileNameDD = document.getElementById("fileNameDD");

        while(fileNameDD.options.length > 0) { // blanking the select
            fileNameDD.options.remove(0);
        }

        fileNameArray.forEach(function(name){
          let selectOption = new Option(name);
          fileNameDD.appendChild(selectOption);
        })
    }

    // server requests

    async function getItemDetails(id){
        let msgBody = {
            id: id
        }
         const msgOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(msgBody)
        };
        const msg = await fetch('/getItemInfo', msgOptions);
        let returnMsg = await msg.json();
        return  returnMsg.itemDetails
    }

    async function getLinkTypes(){
        const msg = await fetch('/getLinkTypes');
        let returnMsg = await msg.json();
        return  returnMsg.linkTypes
    }

    async function addElement(elementType){
        let msgBody = {};
        switch(elementType) {
            case 'host':
                msgBody = {
                    request: 'addHost',
                    hostname: document.getElementById("tbxHostHostname").value
                }
                console.log(msgBody);
                break;
            case 'switch':
                msgBody = {
                    request: 'addSwitch',
                    hostname: document.getElementById("tbxSwitchHostname").value
                }
                console.log(msgBody);
                break;
            case 'router':
                msgBody = {
                    request: 'addRouter',
                    hostname: document.getElementById("tbxRouterHostname").value
                }
                console.log(msgBody);
                break;
            case 'link':
                 msgBody = {
                    request: 'addLink',
                    linkType: getLinkObjectByType(document.getElementById('selectCableType').value),
                    source: document.getElementById("selectSource").value,
                    destination: document.getElementById("selectDest").value
                }
                console.log(msgBody);
                break;
        }
        const msgOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(msgBody)
        };
        const msg = await fetch('/changeNetConf', msgOptions);

        let returnMsg = await msg.json();
        if (returnMsg.status = '200') {
            // code to link server table with vis table
            let nodeArray = returnMsg.runningNodes;
            let edgeArray = returnMsg.runningEdges;
            let visNodes = new vis.DataSet(nodeArray);
            let visEdges = new vis.DataSet(edgeArray);

            console.log(returnMsg.runningNodes)
            restartVisNetwork(visNodes, visEdges)
            fileUnsavedUI()


            document.getElementById("messageOutput").innerText = returnMsg.statusDescription;
        } else{
            document.getElementById("messageOutput").innerText = returnMsg.statusDescription + ' please try again!';
        }

    }

    async function delElement(elementType){
        let msgBody = {};
        switch(elementType) {
            case 'host':
                msgBody = {
                    request: 'delHost',
                    hostname: document.getElementById("tbxEditHostHostname").value
                }
                console.log(msgBody);
                break;
            case 'switch':
                msgBody = {
                    request: 'delSwitch',
                    hostname: document.getElementById("tbxEditSwitchHostname").value
                }
                console.log(msgBody);
                break;
            case 'router':
                msgBody = {
                    request: 'delRouter',
                    hostname: document.getElementById("tbxEditRouterHostname").value
                }
                console.log(msgBody);
                break;
            case 'link':
                 msgBody = {
                    request: 'delLink',
                    source: document.getElementById("editSource").value,
                    destination: document.getElementById("editDest").value
                }
                console.log(msgBody);
                break;
        }
        const msgOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(msgBody)
        };
        const msg = await fetch('/changeNetConf', msgOptions);

        let returnMsg = await msg.json();
        if (returnMsg.status = '200') {
            // code to link server table with vis table
            let nodeArray = returnMsg.runningNodes;
            let edgeArray = returnMsg.runningEdges;
            let visNodes = new vis.DataSet(nodeArray);
            let visEdges = new vis.DataSet(edgeArray);

            console.log(returnMsg.runningNodes)
            restartVisNetwork(visNodes, visEdges)
            fileUnsavedUI()


            document.getElementById("messageOutput").innerText = returnMsg.statusDescription;
        } else{
            document.getElementById("messageOutput").innerText = returnMsg.statusDescription + ' please try again!';
        }

    }

    async function editElement(elementType) {
        let msgBody = {};
        switch (elementType) {
            case 'host':
                msgBody = {
                    request: 'editHost',
                    id: document.getElementById("hostIdBanner").innerText,
                    hostname: document.getElementById("tbxEditHostHostname").value
                }
                console.log(msgBody);
                break;
            case 'switch':
                msgBody = {
                    request: 'editSwitch',
                    id: document.getElementById("switchIdBanner").innerText,
                    hostname: document.getElementById("tbxEditSwitchHostname").value
                }
                console.log(msgBody);
                break;
            case 'router':
                msgBody = {
                    request: 'editRouter',
                    id: document.getElementById("routerIdBanner").innerText,
                    hostname: document.getElementById("tbxEditRouterHostname").value
                }
                console.log(msgBody);
                break;
            case 'link':
                msgBody = {
                    request: 'editLink',
                    id: document.getElementById("linkIdBanner").innerText,
                    linkType: getLinkObjectByType(document.getElementById('editCableType').value),
                    source: document.getElementById("editSource").value,
                    destination: document.getElementById("editDest").value
                }
                console.log(msgBody);
                break;
        }
        const msgOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(msgBody)
        };
        const msg = await fetch('/changeNetConf', msgOptions);

        let returnMsg = await msg.json();
        if (returnMsg.status = '200') {
            // code to link server table with vis table
            let nodeArray = returnMsg.runningNodes;
            let edgeArray = returnMsg.runningEdges;
            let visNodes = new vis.DataSet(nodeArray);
            let visEdges = new vis.DataSet(edgeArray);

            console.log(returnMsg.runningNodes)
            restartVisNetwork(visNodes, visEdges)
            fileUnsavedUI()

            document.getElementById("messageOutput").innerText = returnMsg.statusDescription;
        } else {
            document.getElementById("messageOutput").innerText = returnMsg.statusDescription + ' please try again!';
        }
    }

    async function getFileName(){
        const msg = await fetch('/getFileName');
        let returnMsg = await msg.json();
        return  returnMsg.fileName
    }

    // database

    async function saveNetworkToDB(fileName, type){

        console.log('saveNewNetwork called, FileName: '+ fileName + ', Type: '+ type);

        let msgBody = {
            fileName: fileName
        }
        const msgOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(msgBody)
        };
        if( type == "New"){
            const msg = await fetch('/mySqlSaveNewNetwork', msgOptions);
            let returnMsg = await msg.json();

            if (returnMsg.status == 200){
                document.getElementById('saveStatusReadout').innerText = returnMsg.statusDescription;
                setFileNameUI(fileName);
                document.getElementById('modSaveNewNetwork').style.display='none'
            } else {
                document.getElementById('saveStatusReadout').innerText = returnMsg.statusDescription;
            }
        } else {
            const msg = await fetch('/mySqlEditNetwork', msgOptions);
            let returnMsg = await msg.json();

            if (returnMsg.status == 200){
                document.getElementById('saveStatusReadout').innerText = returnMsg.statusDescription;
                setFileNameUI(fileName);
            } else {
                document.getElementById('saveStatusReadout').innerText = returnMsg.statusDescription;
            }
        }
    }

    async function LoadNetworkFromDB(fileName){
        console.log('saveNewNetwork called, fileName: '+ fileName);

        let msgBody = {
            fileName: fileName
        }
        const msgOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(msgBody)
        };

        const msg = await fetch('/mySqlLoadNetwork', msgOptions);
        let returnMsg = await msg.json();

        if (returnMsg.status == 200){
            populateVisStartup();
            document.getElementById('saveStatusReadout').innerText = returnMsg.statusDescription;
            setFileNameUI(fileName);
            document.getElementById('modLoadNetwork').style.display='none';
        } else {
            console.log('network Load Failed');
        }



    }

    async function getDBInfo(){
        const msg = await fetch('/getDBContents');
        let returnMsg = await msg.json();
        return returnMsg.result
    }

    /*
    testNum = 5
    testBtn = document.getElementById("testButton");
    testBtn.addEventListener('click', async  event =>{
        let msgBody = {
            message : 0,
        }

        let i
        for (i = 0; i < testNum; i++) {
            const msgOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(msgBody)
            };
            const msg = await fetch('/testComs', msgOptions);

            let msgStatus = await msg.json();
            if (msgStatus.status = 'success') {
                console.log(msgStatus);
                document.getElementById("messageOutput").innerText = msgStatus.testresult;
            } else{
                console.log('validation unsuccessful!')
            }
            msgBody.message++


        }


    })*/

</script>

</html>



